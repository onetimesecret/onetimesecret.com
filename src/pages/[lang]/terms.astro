---
/**
 * src/pages/[lang]/terms.astro
 * Terms of service page using content collections
 */
import { getCollection } from "astro:content";
import ContentPage from "@/components/ContentPage.astro";
import { getLanguagePaths, type SupportedLanguage } from "@/i18n";
import { DEFAULT_LANGUAGE } from "@config/astro/i18n";
import { createLocaleI18n } from "@/i18n";
import enMessages from "@/i18n/ui/en.json";
import type { MessageSchema } from "@/i18n";

export async function getStaticPaths() {
  return getLanguagePaths();
}

const { lang = DEFAULT_LANGUAGE } = Astro.params as { lang: SupportedLanguage };

// Setup initial messages for i18n
const initialMessages = {
  [DEFAULT_LANGUAGE]: enMessages as MessageSchema,
};

// Initialize i18n for page content
await createLocaleI18n(lang, initialMessages);

// Get the page by language/slug using Astro content collection API
const allPages = await getCollection("pages");
const page = allPages.find(
  (page) =>
    page.id === `${lang}/terms.md` ||
    (lang !== DEFAULT_LANGUAGE && page.id === `${DEFAULT_LANGUAGE}/terms.md`),
);

if (!page) {
  throw new Error(`Page not found: ${lang}/terms.md`);
}

// Render the content
const renderedContent = await page.render();

// Track if we're using a fallback
const isFallback = !page.id.startsWith(`${lang}/`);
---

<ContentPage
  page={page}
  renderedContent={renderedContent}
  lang={lang}
  initialMessages={initialMessages}
/>

{isFallback && (
  <div class="fixed bottom-4 right-4 z-50 rounded-md bg-amber-50 px-4 py-2 text-sm text-amber-600 shadow-md dark:bg-amber-900/30 dark:text-amber-400">
    <p>
      This content is not available in your preferred language ({lang}).
      Showing the {DEFAULT_LANGUAGE} version instead.
    </p>
  </div>
)}
