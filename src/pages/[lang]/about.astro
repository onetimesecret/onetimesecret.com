---
/**
 * src/pages/[lang]/about.astro
 * About page implementation using content collections and ContentPageLayout
 */
import type { MessageSchema } from "@/i18n";
import {
  createLocaleI18n,
  getLanguagePaths,
  type SupportedLanguage,
} from "@/i18n";
import enMessages from "@/i18n/ui/en.json";
import ContentPageLayout from "@/layouts/ContentPageLayout.astro";
import { DEFAULT_LANGUAGE, LANGUAGE_META } from "@config/astro/i18n";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  return getLanguagePaths();
}

interface Props {
  lang: SupportedLanguage;
  langMeta: {
    name: string;
    locale: string;
    dir: string;
  };
  initialMessages: Record<string, MessageSchema>;
}

// Get props from Astro.props as well as params
const {
  lang: propsLang,
  langMeta,
  initialMessages: propsMessages,
} = Astro.props;
const { lang: paramsLang = DEFAULT_LANGUAGE } = Astro.params as {
  lang?: SupportedLanguage;
};

// Use props lang if available, otherwise use params lang
const lang = propsLang || paramsLang;

// Setup initial messages for i18n
const initialMessages = propsMessages || {
  [DEFAULT_LANGUAGE]: enMessages as MessageSchema,
};

// Initialize i18n for page content
const pageI18n = await createLocaleI18n(lang, initialMessages);
const t = pageI18n.global.t;

// Get the page by language/slug using Astro content collection API
const allPages = await getCollection("pages");
const page = allPages.find(
  (page) =>
    page.id === `${lang}/about.md` ||
    (lang !== DEFAULT_LANGUAGE && page.id === `${DEFAULT_LANGUAGE}/about.md`),
);

if (!page) {
  throw new Error(`Page not found: ${lang}/about.md`);
}

// Render the content
const renderedContent = await page.render();
const { Content } = renderedContent;
---

<ContentPageLayout
  title={`${page.data.title} | Onetime Secret`}
  description={page.data.description || `${page.data.title} | Onetime Secret`}
  htmlLang={lang}
  langDir={langMeta?.dir || LANGUAGE_META[lang]?.dir || "ltr"}
  initialMessages={initialMessages}
  heroTitle={page.data.title}
  heroDescription={page.data.description}>
  <Content />
</ContentPageLayout>
