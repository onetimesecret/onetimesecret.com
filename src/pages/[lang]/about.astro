---
import Layout from "@/layouts/Layout.astro";
// Import createLocaleI18n for page-specific SSR translations
// Also import MessageSchema for typing, and enMessages for a fallback
import { createLocaleI18n, type MessageSchema } from "@/i18n";
import enMessages from "@/i18n/ui/en.json";

import { loadLocalizedPage } from "@/utils/content";
// Import i18n config for defaults and types
import { DEFAULT_LANGUAGE, LANGUAGE_META } from "@config/astro/i18n";
import { getLanguagePaths, type SupportedLanguage } from "@/i18n";

export async function getStaticPaths() {
  return getLanguagePaths();
}

interface Props {
  // Allow props to be potentially undefined to handle HMR issues gracefully
  lang?: SupportedLanguage;
  initialMessages?: Record<string, MessageSchema>;
  langMeta?: {
    name: string;
    locale: string;
    dir: string;
  };
  // now: number; // if needed from getStaticPaths
}

// Determine effective language:
// 1. From Astro.props.lang (ideal)
// 2. From Astro.params.lang (direct from URL segment, good fallback)
// 3. From DEFAULT_LANGUAGE (last resort)
const effectiveLang = (Astro.props.lang ||
  Astro.params.lang ||
  DEFAULT_LANGUAGE) as SupportedLanguage;

// Determine effective langMeta, falling back to default language's meta if necessary
const effectiveLangMeta = Astro.props.langMeta || LANGUAGE_META[effectiveLang];

// Determine effective initialMessages, falling back to just English messages if necessary
// This ensures initialMessages is always an object.
const effectiveInitialMessages = Astro.props.initialMessages || {
  [DEFAULT_LANGUAGE]: enMessages as MessageSchema,
};

// Initialize i18n for page SSR content (e.g., title, description)
// This uses the effectiveLang and effectiveInitialMessages to be robust.
const i18n = await createLocaleI18n(effectiveLang, effectiveInitialMessages);
// const { t } = i18n.global; // if you need t directly for this page's SSR content

// Load page content using the robust effectiveLang
const { Content, headings, data } = await loadLocalizedPage(
  "pages",
  effectiveLang,
  "about",
);
---

<Layout
  title={`${data.title} | Onetime Secret`}
  description={data.description ||
    "Learn about Onetime Secret, our mission to provide secure one-time sharing, and the team behind our service."}
  htmlLang={effectiveLang}
  langDir={effectiveLangMeta.dir}
  initialMessages={effectiveInitialMessages}>
  <div class="flex min-h-screen flex-col bg-white dark:bg-gray-900">
    <Content />
    <!-- If About page had client:load Vue components needing i18n: -->
    <!-- <MyVueComponent client:load locale={effectiveLang} initialMessages={effectiveInitialMessages} /> -->
  </div>
</Layout>
