---
import Layout from "@/layouts/Layout.astro";
import Homepage from "@/components/vue/homepage/Homepage.vue";
import "@/styles/global.css";
import "@/styles/tailwind.css";
import { i18n as globalI18nInstance, setLanguage } from "@/i18n"; // Import global instance and setLanguage
import { type SupportedLanguage } from "@config/astro/i18n";
import { getLanguagePaths } from "@/i18n";
import { createI18n } from "vue-i18n";
import type enMessages from "@/i18n/ui/en.json"; // For MessageSchema type

// Define MessageSchema based on the structure of en.json
type MessageSchema = typeof enMessages;

/**
 * Component Script:
 * What markdown calls frontmatter, astro refers to as Component Script.
 *
 * "The code fence is designed to guarantee that the JavaScript that you
 * write in it is "fenced in." It won't escape into your frontend
 * application, or fall into your user's hands. You can safely write code
 * here that is expensive or sensitive (like a call to your private
 * database) without worrying about it ever ending up in your user's
 * browser."
 *  @see https://docs.astro.build/en/basics/astro-components/#the-component-script
 *  @see https://astro.new/latest/frameworks/
 *
 * Import all `.md` files in `./src/pages/post/`:
 * const matches = import.meta.glob('../pages/post/*.md', { eager: true });
 *
 * Loads and initializes the requested WASM file:
 * const wasm = await WebAssembly.instantiateStreaming(fetch('/example.wasm'));
 *
 *
 * Component Props:
 * Usage: <GreetingHeadline greeting="Howdy" name="Partner" />
 *
 * const { greeting, name } = Astro.props;
 *
 * "Astro components are always rendered to static HTML, even when they include
 * framework components that are hydrated. This means that you can only pass
 * props that don't do any HTML rendering."
 *
 * Component Template:
 * "Use the Astro <slot /> pattern to pass static content generated by
 * Astro components as children to your framework components inside an
 * .astro component"
 *
 * "If you try to hydrate an Astro component with a client: modifier, you
 * will get an error."
 */

export async function getStaticPaths() {
  return getLanguagePaths();
}

interface Props {
  lang: SupportedLanguage;
  now: number; // Changed from plop: Date to now: number
  initialMessages: Record<string, MessageSchema>;
  langMeta: {
    name: string;
    locale: string;
    dir: string;
  };
}

const { lang, now, initialMessages, langMeta } = Astro.props;

// Initialize a page-specific i18n instance for SSR content
const pageI18n = createI18n<[MessageSchema], string>({
  legacy: false,
  locale: lang,
  fallbackLocale: "en",
  messages: initialMessages,
  silentTranslationWarn: true,
  silentFallbackWarn: true,
});
const t = pageI18n.global.t;

// Translated title and description for the Layout
// IMPORTANT: You'll need to add 'homepage.title' and 'homepage.description' keys
// to your i18n JSON files (e.g., src/i18n/ui/en.json).
const pageTitle = t(
  "homepage.title",
  "Share Secrets Securely | Onetime Secret",
);
const pageDescription = t(
  "homepage.description",
  "Share sensitive information securely with self-destructing links. Paste your secret, generate a link, and share it. Once viewed, it's gone forever.",
);

// The import "@/i18n"; was already here, which ensures the global i18n module is initialized.
// For client-side components like Homepage.vue, they will call setLanguage(lang) themselves
// to configure the global i18n instance on the client.
---

<!-- The Component Template -->
<Layout
  title={pageTitle}
  description={pageDescription}
  htmlLang={lang}
  langDir={langMeta.dir}>
  <!-- Render the Homepage component -->
  <!-- client:load ensures the Vue component hydrates and runs client-side -->
  <Homepage
    client:load
    now={now}
    locale={lang}
  />
  <!-- <slot />  -->
</Layout>
