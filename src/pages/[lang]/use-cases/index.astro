---
/**
 * src/pages/[lang]/use-cases/index.astro
 * List of use cases example - demonstrates working with multiple collection items
 */
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import MainNavigation from "@/components/vue/layouts/MainNavigation.vue";
import { getLanguagePaths, type SupportedLanguage } from "@/i18n";
import { DEFAULT_LANGUAGE, LANGUAGE_META } from "@config/astro/i18n";
import { createLocaleI18n } from "@/i18n";
import enMessages from "@/i18n/ui/en.json";
import type { MessageSchema } from "@/i18n";
import { getLocalizedCollection } from "@/utils/content";

export async function getStaticPaths() {
  return getLanguagePaths();
}

const { lang = DEFAULT_LANGUAGE } = Astro.params as { lang: SupportedLanguage };
const langMeta = LANGUAGE_META[lang];

// Setup initial messages for i18n
const initialMessages = {
  [DEFAULT_LANGUAGE]: enMessages as MessageSchema,
};

// Initialize i18n for page content
const i18n = await createLocaleI18n(lang, initialMessages);
const { t } = i18n.global;

// Get all use cases for this language (with fallbacks to default language)
const useCases = await getLocalizedCollection("useCases", lang as SupportedLanguage);

// Sort by order property (if available) or alphabetically by title
useCases.sort((a, b) => {
  if (a.data.order !== undefined && b.data.order !== undefined) {
    return a.data.order - b.data.order;
  }
  return a.data.title.localeCompare(b.data.title);
});
---

<Layout
  title={`Use Cases | Onetime Secret`}
  description="Explore various ways to use Onetime Secret in your daily workflow and security practices."
  htmlLang={lang}
  langDir={langMeta.dir}
  initialMessages={initialMessages}>
  <div class="flex min-h-screen flex-col bg-gradient-to-b from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-950">
    <header class="sticky top-0 z-50 w-full border-b border-slate-200 bg-white/95 shadow-sm backdrop-blur-sm dark:border-slate-800 dark:bg-slate-900/90">
      <MainNavigation
        client:load
        locale={lang}
        initialMessages={initialMessages}
      />
    </header>

    <div class="relative overflow-hidden border-b border-slate-200/80 bg-gradient-to-b from-blue-50 to-white py-16 sm:py-24 dark:border-slate-800/50 dark:from-slate-800 dark:to-slate-900">
      <div class="pointer-events-none absolute inset-0 opacity-10 dark:opacity-5">
        <div class="bg-gradient-radial absolute top-0 right-0 h-1/3 w-1/3 transform from-blue-200 to-transparent blur-3xl"></div>
        <div class="bg-gradient-radial absolute bottom-0 left-0 h-1/3 w-1/3 transform from-blue-200 to-transparent blur-3xl"></div>
      </div>
      <div class="relative mx-auto max-w-7xl px-6 lg:px-8">
        <div class="mx-auto max-w-3xl lg:text-center">
          <div class="mb-6 inline-flex items-center justify-center rounded-full bg-blue-100 px-3 py-1.5 text-sm font-medium text-blue-600 ring-1 ring-blue-600/20 ring-inset dark:bg-blue-950 dark:text-blue-300 dark:ring-blue-800/30">
            <span class="mr-1.5">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4">
                <path fill-rule="evenodd" d="M10 1a4.5 4.5 0 00-4.5 4.5V9H5a2 2 0 00-2 2v6a2 2 0 002 2h10a2 2 0 002-2v-6a2 2 0 00-2-2h-.5V5.5A4.5 4.5 0 0010 1zm3 8V5.5a3 3 0 10-6 0V9h6z" clip-rule="evenodd"></path>
              </svg>
            </span>
            Onetime Secret
          </div>
          <h1 class="bg-gradient-to-r from-slate-900 to-slate-700 bg-clip-text text-4xl font-bold tracking-tight text-slate-900 text-transparent sm:text-5xl md:text-6xl dark:from-white dark:to-slate-300 dark:text-white">
            Use Cases
          </h1>
          <p class="mx-auto mt-6 max-w-2xl text-lg leading-8 text-slate-600 dark:text-slate-300">
            Explore various ways to use Onetime Secret in your daily workflow and security practices
          </p>
        </div>
      </div>
    </div>

    <main class="flex-grow">
      <div class="mx-auto max-w-7xl px-4 py-12 sm:px-6 lg:px-8">
        <div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
          {useCases.map((useCase) => (
            <div class="group relative overflow-hidden rounded-xl border border-slate-200 bg-white p-6 shadow-sm transition-all hover:shadow-md dark:border-slate-700 dark:bg-slate-800">
              {useCase.data.icon && (
                <div class="mb-4 inline-flex h-12 w-12 items-center justify-center rounded-lg bg-blue-50 text-blue-600 dark:bg-blue-900/30 dark:text-blue-300">
                  <span class="text-2xl">{useCase.data.icon}</span>
                </div>
              )}
              <h2 class="mb-2 text-xl font-bold text-slate-900 dark:text-white">
                {useCase.data.title}
              </h2>
              <p class="mb-4 text-slate-600 dark:text-slate-300">
                {useCase.data.description}
              </p>
              <a
                href={`/${lang}/use-cases/${useCase.id.split('/')[1]}`}
                class="inline-flex items-center text-sm font-medium text-blue-600 transition-colors hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
              >
                Learn more
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  class="ml-1 h-4 w-4"
                >
                  <path
                    fill-rule="evenodd"
                    d="M5 10a.75.75 0 01.75-.75h6.638L10.23 7.29a.75.75 0 111.04-1.08l3.5 3.25a.75.75 0 010 1.08l-3.5 3.25a.75.75 0 11-1.04-1.08l2.158-1.96H5.75A.75.75 0 015 10z"
                    clip-rule="evenodd"
                  />
                </svg>
              </a>
            </div>
          ))}
        </div>

        {useCases.length === 0 && (
          <div class="rounded-lg border border-slate-200 bg-white p-8 text-center dark:border-slate-700 dark:bg-slate-800">
            <p class="text-lg text-slate-600 dark:text-slate-300">
              No use cases available yet.
            </p>
          </div>
        )}
      </div>
    </main>
  </div>
</Layout>
