---
/**
 * src/pages/[lang]/pricing.astro
 * Pricing page implementation using Layout for consistent navigation
 */
import Layout from "@/layouts/Layout.astro";
import PricingComponent from "@/components/vue/pricing/Pricing.vue";
import { getLanguagePaths } from "@/i18n";
import { createLocaleI18n, type MessageSchema } from "@/i18n";
import { DEFAULT_LANGUAGE, LANGUAGE_META } from "@config/astro/i18n";
import enMessages from "@/i18n/ui/en.json";
import frMessages from "@/i18n/ui/fr.json";
import deMessages from "@/i18n/ui/de.json";

// Export getStaticPaths to generate pages for each language
export async function getStaticPaths() {
  return getLanguagePaths();
}

// Get the current language from URL parameters
const { lang } = Astro.params;
const currentLang = lang || DEFAULT_LANGUAGE;
const currentLangMeta =
  LANGUAGE_META[currentLang as keyof typeof LANGUAGE_META] ||
  LANGUAGE_META[DEFAULT_LANGUAGE];

// Set up messages for the current language
const messagesMap: Record<string, MessageSchema> = {
  en: enMessages as MessageSchema,
  fr: frMessages as MessageSchema,
  de: deMessages as MessageSchema,
};

const pageScopedInitialMessages: Record<string, MessageSchema> = {
  [currentLang]:
    messagesMap[currentLang as keyof typeof messagesMap] ||
    (enMessages as MessageSchema),
};

// Initialize i18n for SSR content
const pageI18n = await createLocaleI18n(currentLang, pageScopedInitialMessages);
const t = pageI18n.global.t;

// Translated title and description
const pageTitle = t("web.pricing.title");
const pageDescription = t("web.pricing.description");
---

<Layout
  title={pageTitle}
  description={pageDescription}
  htmlLang={currentLang}
  langDir={currentLangMeta.dir}
  initialMessages={pageScopedInitialMessages}
  heroTitle={pageTitle}
  heroDescription={pageDescription}>
  <PricingComponent
    client:load
    locale={currentLang}
    htmlLang={currentLang}
    langDir={currentLangMeta.dir}
    initialMessages={pageScopedInitialMessages}
  />
</Layout>
