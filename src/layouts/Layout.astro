---
// Component imports
import LanguagePicker from "@/components/LanguagePicker.astro";
import FooterLinkLists from "@/components/vue/layouts/FooterLinkLists.vue";
import FooterSignOff from "@/components/vue/layouts/FooterSignOff.vue";
import Favicons from "@/components/layout/Favicons.astro";
import SeoMeta from "@/components/layout/SeoMeta.astro";
import SvgSprites from "@/components/layout/SvgSprites.astro";
import OptimizedFonts from "@/components/layout/OptimizedFonts.astro";

// Utilities
import { getLocaleFromUrl } from "@/i18n/utils";
import { generateCspConnectSrc } from "@/utils/security";
import {
  getRouteSeoConfig,
  generateBreadcrumbsLd,
  defaultSeoValues,
  getDefaultWebApplicationLd,
} from "@/utils/seo";
import {
  DEFAULT_LANGUAGE,
  LANGUAGE_META,
  SUPPORTED_LANGUAGES,
} from "@config/astro/i18n";
import type { MessageSchema } from "@/i18n"; // For type
import enMessages from "@/i18n/ui/en.json"; // For default initialMessages

// Styles
import "@/styles/global.css";
import "@/styles/tailwind.css";

// Routing
const currentPath = Astro.url.pathname;

// --------------------------
// Props Interface
// --------------------------
export interface Props {
  title?: string;
  description?: string;
  canonicalUrl?: string;
  ogImage?: string;
  ogType?: string;
  twitterCard?: string;
  keywords?: string;
  noindex?: boolean;
  alternateLanguages?: { code: string; url: string }[];
  structuredData?: object;
  // Props for i18n, with optional chaining for robustness
  htmlLang?: string;
  langDir?: string;
  initialMessages?: Record<string, MessageSchema>;
}

// --------------------------
// Configuration & Data Processing
// --------------------------

// Destructure props with defaults to ensure they are always defined
const {
  htmlLang = DEFAULT_LANGUAGE,
  initialMessages = { [DEFAULT_LANGUAGE]: enMessages as MessageSchema },
  // SEO related props
  title: propsTitle,
  description: propsDescription,
  ogImage: propsOgImage,
  ogType: propsOgType,
  keywords: propsKeywords,
  canonicalUrl: propsCanonicalUrl,
  twitterCard: propsTwitterCard,
  noindex: propsNoindex,
  alternateLanguages: propsAlternateLanguages,
  structuredData: propsStructuredData,
} = Astro.props;

// 1. DETERMINE EFFECTIVE LOCALE CONSISTENTLY
// The URL locale takes precedence, fall back to htmlLang from props, then default
const effectiveLocale =
  getLocaleFromUrl(Astro.url) || htmlLang || DEFAULT_LANGUAGE;

// 2. DERIVE langDir BASED ON EFFECTIVE LOCALE
const langDir =
  LANGUAGE_META[effectiveLocale as keyof typeof LANGUAGE_META]?.dir ||
  LANGUAGE_META[DEFAULT_LANGUAGE].dir;

const siteOrigin = Astro.url.origin.toString();

// For debugging during build - keep this during development
console.log(
  `Layout: URL="${Astro.url.pathname}", htmlLang="${htmlLang}", effectiveLocale="${effectiveLocale}"`,
);

// SEO Configuration
const routeSpecificSeo = getRouteSeoConfig(currentPath, siteOrigin);

const pageTitle =
  propsTitle || routeSpecificSeo.title || defaultSeoValues.title;
const pageDescription =
  propsDescription ||
  routeSpecificSeo.description ||
  defaultSeoValues.description;
const pageOgImage =
  propsOgImage || routeSpecificSeo.ogImage || defaultSeoValues.ogImage;
const pageOgType =
  propsOgType || routeSpecificSeo.ogType || defaultSeoValues.ogType;
const pageKeywords = propsKeywords || defaultSeoValues.keywords;
const pageCanonicalUrl = propsCanonicalUrl || Astro.url.href;
const pageTwitterCard = propsTwitterCard || defaultSeoValues.twitterCard;

const pageNoindex =
  propsNoindex !== undefined
    ? propsNoindex
    : currentPath.startsWith("/secret/") ||
      currentPath.startsWith("/private/") ||
      currentPath.startsWith("/receipt/");

// 3. GENERATE ALTERNATE LANGUAGE LINKS CONSISTENTLY
const languagePrefixes = ["/en", "/fr", "/de"];
const hasLangPrefix = languagePrefixes.some((prefix) =>
  currentPath.startsWith(prefix),
);
const basePathForAlternates = hasLangPrefix
  ? currentPath.substring(3)
  : currentPath;

const pageAlternateLanguages =
  propsAlternateLanguages ||
  SUPPORTED_LANGUAGES.map((lang) => ({
    code: lang,
    url: `${siteOrigin}/${lang}${basePathForAlternates}`,
  }));

const pageStructuredData =
  propsStructuredData ||
  routeSpecificSeo.structuredData ||
  getDefaultWebApplicationLd(siteOrigin, pageDescription);

const pageBreadcrumbsLd = generateBreadcrumbsLd(currentPath, siteOrigin);

const apiUrl = import.meta.env.PUBLIC_API_BASE_URL;
const isDebugMode = import.meta.env.DEV || import.meta.env.DEBUG;
const connectSrcDirective = generateCspConnectSrc(apiUrl, isDebugMode);
---

<!doctype html>
<html
  lang={effectiveLocale}
  dir={langDir}
  class="h-full">
  <head>
    <meta charset="utf-8" />
    <meta
      http-equiv="Content-Type"
      content="text/html; charset=utf-8"
    />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0"
    />
    <meta
      name="color-scheme"
      content="dark light"
    />
    <meta
      name="author"
      content="Onetime Secret"
    />
    <Favicons />
    <SeoMeta
      title={pageTitle}
      description={pageDescription}
      canonicalUrl={pageCanonicalUrl}
      ogImageBaseUrl={siteOrigin}
      ogImage={pageOgImage}
      ogType={pageOgType}
      twitterCard={pageTwitterCard}
      keywords={pageKeywords}
      noindex={pageNoindex}
      alternateLanguages={pageAlternateLanguages}
      structuredData={pageStructuredData}
      breadcrumbsLd={pageBreadcrumbsLd}
    />
    <link
      rel="alternate"
      hreflang="x-default"
      href={`${siteOrigin}${basePathForAlternates}`}
    />
    <OptimizedFonts />
    <meta
      http-equiv="Content-Security-Policy"
      content={`default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src ${connectSrcDirective}; worker-src 'self' blob:;`}
    />
    <title>{pageTitle}</title>
  </head>
  <body class="flex h-full flex-col bg-white dark:bg-gray-900">
    <div class="bg-brand-500 fixed top-0 left-0 z-50 h-1 w-full"></div>
    <div class="flex-grow">
      <slot />
    </div>
    <footer class="bg-white dark:bg-gray-900">
      <FooterLinkLists
        client:load
        locale={effectiveLocale}
        initialMessages={initialMessages}
      />
      <LanguagePicker currentLocale={effectiveLocale} />
      <FooterSignOff
        client:load
        locale={effectiveLocale}
        initialMessages={initialMessages}
      />
    </footer>
  </body><SvgSprites />
</html>
