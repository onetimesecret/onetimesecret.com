---
// Component imports
import LanguagePicker from "@/components/LanguagePicker.astro";
import FooterLinkLists from "@/components/vue/layouts/FooterLinkLists.vue";
import FooterSignOff from "@/components/vue/layouts/FooterSignOff.vue";
import Favicons from "@/components/layout/Favicons.astro";
import SeoMeta from "@/components/layout/SeoMeta.astro";
import SvgSprites from "@/components/layout/SvgSprites.astro";
import OptimizedFonts from "@/components/layout/OptimizedFonts.astro";

// Utilities
// import { getLocaleFromUrl } from "../i18n/utils"; // Not used directly here
import { generateCspConnectSrc } from "@/utils/security";
import {
  getRouteSeoConfig,
  generateBreadcrumbsLd,
  defaultSeoValues,
  getDefaultWebApplicationLd,
} from "@/utils/seo";
import { DEFAULT_LANGUAGE, LANGUAGE_META } from "@config/astro/i18n"; // For defaults
import type { MessageSchema } from "@/i18n"; // For type
import enMessages from "@/i18n/ui/en.json"; // For default initialMessages

// Styles
import "@/styles/global.css";
import "@/styles/tailwind.css";

// This lang is from Astro.params, specific to Layout's own context if needed.
// It's different from the htmlLang prop.
const layoutFileLangParam = (Astro.params.lang || DEFAULT_LANGUAGE) as string;

// Routing
const currentPath = Astro.url.pathname;

// --------------------------
// Props Interface
// --------------------------
export interface Props {
  title?: string;
  description?: string;
  canonicalUrl?: string;
  ogImage?: string;
  ogType?: string;
  twitterCard?: string;
  keywords?: string;
  noindex?: boolean;
  alternateLanguages?: { code: string; url: string }[];
  structuredData?: object;
  // Props for i18n, with optional chaining for robustness
  htmlLang?: string;
  langDir?: string;
  initialMessages?: Record<string, MessageSchema>;
}

// --------------------------
// Configuration & Data Processing
// --------------------------

// Destructure props with defaults to ensure they are always defined
const {
  htmlLang = DEFAULT_LANGUAGE,
  langDir = LANGUAGE_META[DEFAULT_LANGUAGE].dir,
  initialMessages = { [DEFAULT_LANGUAGE]: enMessages as MessageSchema },
  // SEO related props
  title: propsTitle, // Renamed to avoid conflict with pageTitle variable
  description: propsDescription, // Renamed
  ogImage: propsOgImage,
  ogType: propsOgType,
  keywords: propsKeywords,
  canonicalUrl: propsCanonicalUrl,
  twitterCard: propsTwitterCard,
  noindex: propsNoindex,
  alternateLanguages: propsAlternateLanguages,
  structuredData: propsStructuredData,
} = Astro.props;

const siteOrigin = Astro.url.origin.toString();

// SEO Configuration
const routeSpecificSeo = getRouteSeoConfig(currentPath, siteOrigin);

const pageTitle =
  propsTitle || routeSpecificSeo.title || defaultSeoValues.title;
const pageDescription =
  propsDescription ||
  routeSpecificSeo.description ||
  defaultSeoValues.description;
const pageOgImage =
  propsOgImage || routeSpecificSeo.ogImage || defaultSeoValues.ogImage;
const pageOgType =
  propsOgType || routeSpecificSeo.ogType || defaultSeoValues.ogType;
const pageKeywords = propsKeywords || defaultSeoValues.keywords;
const pageCanonicalUrl = propsCanonicalUrl || Astro.url.href;
const pageTwitterCard = propsTwitterCard || defaultSeoValues.twitterCard;

const pageNoindex =
  propsNoindex !== undefined
    ? propsNoindex
    : currentPath.startsWith("/secret/") ||
      currentPath.startsWith("/private/") ||
      currentPath.startsWith("/receipt/");

const pageAlternateLanguages = propsAlternateLanguages || [
  {
    code: "en",
    url: `${siteOrigin}/en${Astro.url.pathname.substring(Astro.url.pathname.startsWith("/en") || Astro.url.pathname.startsWith("/fr") || Astro.url.pathname.startsWith("/de") ? 3 : 0)}`,
  },
];

const pageStructuredData =
  propsStructuredData ||
  routeSpecificSeo.structuredData ||
  getDefaultWebApplicationLd(siteOrigin, pageDescription);

const pageBreadcrumbsLd = generateBreadcrumbsLd(currentPath, siteOrigin);

const apiUrl = import.meta.env.PUBLIC_API_BASE_URL;
const isDebugMode = import.meta.env.DEV || import.meta.env.DEBUG;
const connectSrcDirective = generateCspConnectSrc(apiUrl, isDebugMode);

// Use the robust htmlLang for children components that need locale context
const currentLocaleForChildren = htmlLang;
---

<!doctype html>
<html
  lang={htmlLang}
  dir={langDir}
  class="h-full">
  <head>
    <meta charset="utf-8" />
    <meta
      http-equiv="Content-Type"
      content="text/html; charset=utf-8"
    />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0"
    />
    <meta
      name="color-scheme"
      content="dark light"
    />
    <meta
      name="author"
      content="Onetime Secret"
    />
    <Favicons />
    <SeoMeta
      title={pageTitle}
      description={pageDescription}
      canonicalUrl={pageCanonicalUrl}
      ogImageBaseUrl={siteOrigin}
      ogImage={pageOgImage}
      ogType={pageOgType}
      twitterCard={pageTwitterCard}
      keywords={pageKeywords}
      noindex={pageNoindex}
      alternateLanguages={pageAlternateLanguages}
      structuredData={pageStructuredData}
      breadcrumbsLd={pageBreadcrumbsLd}
    />
    <link
      rel="alternate"
      hreflang="x-default"
      href={siteOrigin +
        Astro.url.pathname.substring(
          Astro.url.pathname.startsWith("/en") ||
            Astro.url.pathname.startsWith("/fr") ||
            Astro.url.pathname.startsWith("/de")
            ? 3
            : 0,
        )}
    />
    <OptimizedFonts />
    <meta
      http-equiv="Content-Security-Policy"
      content={`default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src ${connectSrcDirective}; worker-src 'self' blob:;`}
    />
    <title>{pageTitle}</title>
  </head>
  <body class="flex h-full flex-col bg-white dark:bg-gray-900">
    <div class="bg-brand-500 fixed top-0 left-0 z-50 h-1 w-full"></div>
    <div class="flex-grow">
      <slot />
    </div>
    <footer class="bg-white dark:bg-gray-900">
      <FooterLinkLists
        client:load
        locale={currentLocaleForChildren}
        initialMessages={initialMessages}
      />
      <LanguagePicker currentLocale={currentLocaleForChildren} />
      <FooterSignOff
        client:load
        locale={currentLocaleForChildren}
        initialMessages={initialMessages}
      />
    </footer>
  </body><SvgSprites />
</html>
