---
import { getLocaleFromUrl } from "@/i18n/utils";
import { DEFAULT_LANGUAGE } from "@config/astro/i18n";
import enTranslations from "@/i18n/ui/en.json";
import OIcon from "@/components/vue/icons/OIcon.vue";
import ThemeManager, { AVAILABLE_THEMES } from "@/utils/theme";

// Get the current locale from the URL or use default
const currentLocale = getLocaleFromUrl(Astro.url) || DEFAULT_LANGUAGE;

// For now, we only use English translations at build time
const translations = enTranslations;
---

<div class="flex flex-col items-end">
  <button
    id="theme-cycler-button"
    class="focus:ring-brand-500 inline-flex items-center rounded-md px-2 py-1 text-sm font-medium text-gray-600 transition-colors hover:bg-gray-50 focus:ring-2 focus:outline-none dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-100"
    aria-label={translations.web.accessibilityLabels?.toggleColorTheme ||
      "Cycle color theme"}>
    <OIcon
      collection="heroicons"
      name="swatch"
      size="5"
    />
    <span class="ml-1.5 hidden sm:inline">
      {translations.web.theme?.toggleTheme}
    </span>
  </button>
</div>

<script>
  import ThemeManager, { AVAILABLE_THEMES, type ThemeOption } from "@/utils/theme";

  /**
   * Cycles to the next theme in the available themes and applies it
   */
  function cycleTheme() {
    const currentTheme = ThemeManager.getPreferredTheme();
    const currentIndex = AVAILABLE_THEMES.indexOf(currentTheme);
    const nextIndex = (currentIndex + 1) % AVAILABLE_THEMES.length;
    const nextTheme = AVAILABLE_THEMES[nextIndex] as ThemeOption;

    ThemeManager.setTheme(nextTheme);
  }

  /**
   * Initializes theme management
   */
  function initializeThemeSystem() {
    // Initialize theme manager
    ThemeManager.initialize();

    // Set up event listener for the theme toggle button
    const cycleButton = document.getElementById("theme-cycler-button");
    if (cycleButton) {
      cycleButton.addEventListener("click", cycleTheme);
    }
  }

  // Run initialization when document is ready
  if (typeof window !== "undefined") {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initializeThemeSystem);
    } else {
      initializeThemeSystem();
    }
  }
</script>
