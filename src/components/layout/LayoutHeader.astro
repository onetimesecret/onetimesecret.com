---
import { getLocaleFromUrl } from "@/i18n/utils";
import type { MessageSchema, SupportedLanguage } from "@/i18n";
import { DEFAULT_LANGUAGE } from "@config/astro/i18n";
import OIcon from "@/components/vue/icons/OIcon.vue";
import { localizeUrl } from "@/i18n/utils";
import BrandBar from "./BrandBar.astro";

export interface Props {
  effectiveLocale?: string;
  initialMessages?: Record<string, MessageSchema>;
}

const { initialMessages = {} } = Astro.props;
const effectiveLocale: SupportedLanguage =
  getLocaleFromUrl(Astro.url) || DEFAULT_LANGUAGE;

// Define navigation items
// We'll use direct text here since Astro components don't have Vue's i18n system
// In a real implementation, you would import these from i18n json files
const navigation = [
  { name: "Home", href: localizeUrl("/", effectiveLocale) },
  { name: "About", href: localizeUrl("/about", effectiveLocale) },
  { name: "Pricing", href: localizeUrl("/pricing", effectiveLocale) },
];

// Get current path for highlighting active link
const currentPath = Astro.url.pathname;
---

<div class="relative z-50">
  <BrandBar />
  <header
    class="sticky top-0 z-50 bg-white/95 shadow-sm backdrop-blur-sm dark:bg-gray-900/95">
    <nav
      class="mx-auto flex max-w-7xl items-center justify-between p-4 sm:p-6 lg:px-8"
      aria-label="Global">
      <div class="flex flex-1">
        <a
          href={localizeUrl("/", effectiveLocale)}
          class="-m-1.5 p-1.5">
          <span class="sr-only">Onetime Secret</span>
          <img
            class="h-10 w-auto rounded-lg"
            src="/etc/img/onetime-logo-sm.png"
            alt="Onetime Secret logo"
          />
        </a>
      </div>

      <!-- Mobile menu button -->
      <div class="flex md:hidden">
        <button
          type="button"
          id="mobile-menu-button"
          class="focus-visible:outline-brand-500 -m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700 focus-visible:outline-2 focus-visible:outline-offset-2 dark:text-gray-300"
          aria-expanded="false"
          aria-controls="mobile-navigation-menu">
          <span class="sr-only">Open main menu</span>
          <span
            id="open-icon"
            class="block">
            <OIcon
              collection="heroicons"
              name="bars-3"
              size="6"
            />
          </span>
          <span
            id="close-icon"
            class="hidden">
            <OIcon
              collection="heroicons"
              name="x-mark"
              size="6"
            />
          </span>
        </button>
      </div>

      <!-- Desktop navigation -->
      <div class="hidden md:ml-10 md:flex md:gap-x-8 md:pr-4">
        {
          navigation.map((item) => (
            <a
              href={item.href}
              class:list={[
                "focus-visible:outline-brand-500 text-sm/6 font-semibold transition-colors focus-visible:rounded-sm focus-visible:outline-2 focus-visible:outline-offset-2",
                currentPath === item.href ||
                (item.href !== "/" && currentPath.startsWith(item.href))
                  ? "text-brand-600 dark:text-brand-400"
                  : "hover:text-brand-600 dark:hover:text-brand-400 text-gray-900 dark:text-gray-100",
              ]}>
              {item.name}
            </a>
          ))
        }
      </div>

      <!-- Desktop sign in/up buttons -->
      <div
        class="hidden md:flex md:flex-1 md:items-center md:justify-end md:space-x-4">
        <a
          href={localizeUrl("/signin", effectiveLocale)}
          class="hover:text-brand-600 dark:hover:text-brand-400 focus-visible:outline-brand-500 text-sm/6 font-semibold text-gray-900 transition-colors focus-visible:rounded-sm focus-visible:outline-2 focus-visible:outline-offset-2 dark:text-gray-100">
          Sign in
        </a>
        <a
          href={localizeUrl("/signup", effectiveLocale)}
          class="bg-brand-600 hover:bg-brand-700 dark:bg-brand-700 dark:hover:bg-brand-600 rounded-md px-4 py-2 text-sm/6 font-semibold text-white transition-colors focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white">
          Sign up <span aria-hidden="true">&rarr;</span>
        </a>
      </div>
    </nav>

    <!-- Mobile menu (hidden by default) -->
    <div
      id="mobile-navigation-menu"
      class="fixed inset-0 z-50 hidden md:hidden">
      <div
        class="fixed inset-0 bg-black/25 backdrop-blur-sm"
        id="mobile-menu-backdrop">
      </div>
      <div
        id="mobile-menu-panel"
        class="fixed inset-y-0 right-0 z-50 w-full translate-x-full overflow-y-auto bg-white px-6 py-6 transition-transform duration-300 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10 dark:bg-gray-900 dark:sm:ring-gray-700/30">
        <div class="flex items-center justify-between">
          <a
            href="/"
            class="-m-1.5 p-1.5">
            <span class="sr-only">Onetime Secret</span>
            <img
              class="h-12 w-auto rounded-lg"
              src="/etc/img/onetime-logo-sm.png"
              alt="Onetime Secret logo"
            />
          </a>
          <button
            type="button"
            id="mobile-menu-close"
            class="-m-2.5 rounded-md p-2.5 text-gray-700 dark:text-gray-300">
            <span class="sr-only">Close menu</span>
            <OIcon
              collection="heroicons"
              name="x-mark"
              size="6"
            />
          </button>
        </div>
        <div class="mt-6 flow-root">
          <div class="-my-6 divide-y divide-gray-500/10">
            <div class="space-y-2 py-6">
              {
                navigation.map((item) => (
                  <a
                    href={item.href}
                    class:list={[
                      "focus-visible:outline-brand-500 -mx-3 block rounded-lg px-3 py-2 text-base/7 font-semibold focus-visible:outline-2 focus-visible:outline-offset-2",
                      currentPath === item.href ||
                      (item.href !== "/" && currentPath.startsWith(item.href))
                        ? "text-brand-600 dark:text-brand-400 bg-gray-50 dark:bg-gray-800"
                        : "text-gray-900 hover:bg-gray-50 dark:text-gray-100 dark:hover:bg-gray-800",
                    ]}>
                    {item.name}
                  </a>
                ))
              }
            </div>
            <div class="space-y-2 py-6">
              <a
                href={localizeUrl("/signin", effectiveLocale)}
                class="focus-visible:outline-brand-500 -mx-3 block rounded-lg px-3 py-2.5 text-base/7 font-semibold text-gray-900 hover:bg-gray-50 focus-visible:outline-2 focus-visible:outline-offset-2 dark:text-gray-100 dark:hover:bg-gray-800">
                Sign in
              </a>
              <a
                href={localizeUrl("/signup", effectiveLocale)}
                class="bg-brand-600 hover:bg-brand-700 dark:bg-brand-700 dark:hover:bg-brand-600 -mx-3 block rounded-lg px-3 py-2.5 text-base/7 font-semibold text-white focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white">
                Sign up <span aria-hidden="true">&rarr;</span>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="w-full">
      <slot />
    </div>
  </header>
</div>

<script>
  // Mobile menu functionality
  document.addEventListener("DOMContentLoaded", () => {
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-navigation-menu");
    const mobileMenuPanel = document.getElementById("mobile-menu-panel");
    const mobileMenuBackdrop = document.getElementById("mobile-menu-backdrop");
    const mobileMenuClose = document.getElementById("mobile-menu-close");
    const openIcon = document.getElementById("open-icon");
    const closeIcon = document.getElementById("close-icon");

    function openMenu() {
      mobileMenu.classList.remove("hidden");
      document.body.classList.add("overflow-hidden");

      // Show close icon, hide open icon
      openIcon.classList.add("hidden");
      openIcon.classList.remove("block");
      closeIcon.classList.add("block");
      closeIcon.classList.remove("hidden");

      // Button is now expanded
      mobileMenuButton.setAttribute("aria-expanded", "true");

      // Animate in the panel after a small delay
      setTimeout(() => {
        mobileMenuPanel.classList.remove("translate-x-full");
        mobileMenuPanel.classList.add("translate-x-0");
      }, 10);
    }

    function closeMenu() {
      // First animate out
      mobileMenuPanel.classList.add("translate-x-full");
      mobileMenuPanel.classList.remove("translate-x-0");

      // Show open icon, hide close icon
      openIcon.classList.add("block");
      openIcon.classList.remove("hidden");
      closeIcon.classList.add("hidden");
      closeIcon.classList.remove("block");

      // Button is now collapsed
      mobileMenuButton.setAttribute("aria-expanded", "false");

      // Wait for animation to finish before hiding menu
      setTimeout(() => {
        mobileMenu.classList.add("hidden");
        document.body.classList.remove("overflow-hidden");
      }, 300); // Match the transition duration
    }

    mobileMenuButton.addEventListener("click", () => {
      if (mobileMenu.classList.contains("hidden")) {
        openMenu();
      } else {
        closeMenu();
      }
    });

    mobileMenuClose.addEventListener("click", closeMenu);
    mobileMenuBackdrop.addEventListener("click", closeMenu);

    // Close on escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && !mobileMenu.classList.contains("hidden")) {
        closeMenu();
      }
    });
  });
</script>
